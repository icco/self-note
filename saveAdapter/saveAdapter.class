<?
/*
#########################################

mySQL Database schema for ajaxAutoSave

CREATE TABLE drafts (
	userId 	MEDIUMINT NOT NULL AUTO_INCREMENT, 
	text 	TEXT,
	PRIMARY KEY (userID)
);

*/

	class saveAdapter
	{

		function saveToDatabase($text, $draft)
		{
			global $Config;

			if (isset($text))
			{
				if (($errorData = saveAdapter::dbConnect($Config['database_host'], $Config['database_user'], $Config['database_password'], $Config['database_name'])) !== true)
				{
					$error = 102;
				}
				elseif (($errorData = saveAdapter::setText(1, $text, $draft)) !== true)
				{
					$error = 103;
				}
			}
			else
			{
				$error = 101;
				$errorData = "";
			}

			if (isset($error))
			{
				// creating error node with errormessage
				echo '<error errorNumber="' . $error . '" errorData="' . saveAdapter::convertToXmlAttribute($errorData) . '" />' ;
			}
			else
			{
				// creating XML node with success message
				echo '<result message="success" />';
			}
		}


		// Connect to database
		function dbConnect($host, $username, $password, $database)
		{
			global $dbStatus;

			if($dbStatus['Connected'])
			{
				return true;
			}

			if (!mysql_connect($host, $username, $password))
			{
				return 'Connect: ' . mysql_error();
			}
			if (!mysql_select_db($database))
			{
				return 'DB_SELECT: ' . mysql_error();
			}

			return $dbStatus['Connected'] = true;
		}


		// Set the text of a specific user
		function setText($userId, $text, $draft)
		{
			if (isset($draft)) {

				if (!($result = mysql_query("DELETE FROM drafts WHERE userId = 1;")))
				{
					return 'Error with query: ' . $query . ', error returned: ' . mysql_error();
				}

				if (!($result = mysql_query("INSERT INTO drafts (userId, text) values (1, '" . $text . "');")))
				{
					return 'Error with query: error returned: ' . mysql_error();
				}
	
			return $result;


			}

			if (!($result = mysql_query("UPDATE block SET text = '" . $text . "' WHERE userId = 1;")))
			{
				return 'Error with query: ' . $query . ', error returned: ' . mysql_error();
			}

			return $result;
		}


		// prepare string as xml attribute
		function convertToXmlAttribute($value)
		{
			return htmlspecialchars($value);
		}


		// write XML header
		function writeXmlHeader($command, $preventCaching)
		{
			if ($preventCaching)
			{
				// Prevent the browser from caching the result.
				// Date in the past
				header('Expires: Mon, 26 Jul 1997 05:00:00 GMT') ;
				// always modified
				header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT') ;
				// HTTP/1.1
				header('Cache-Control: no-store, no-cache, must-revalidate') ;
				header('Cache-Control: post-check=0, pre-check=0', false) ;
				// HTTP/1.0
				header('Pragma: no-cache') ;
			}
			// Set the response format.
			header( 'Content-Type:text/xml; charset=UTF-8' ) ;
			// Create the XML document header.
			echo '<?xml version="1.0" encoding="UTF-8"?>' ;
			// Create the main "adapter" node.
			echo '<adapter command="' . $command . '" >' ;
		}


		// write XML footer
		function writeXmlFooter()
		{
			// Close the main "adapter" node.
			echo '</adapter>' ;
		}

	}

?>
